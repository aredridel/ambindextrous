#! /usr/bin/ruby

$:.unshift File.join(File.dirname(__FILE__), '..', 'lib')

require 'fcgi'
require 'logger'
require 'erb'
require 'digest/md5'
require 'uri'
require 'cgi/pathmap'
require 'cacher/webthumbnailer'
require 'ostruct'

LOGGER = Logger.new('/dev/null')

class String
	def urldecode
		gsub(/%([0-F]{2})/) { $1.to_i(16).chr }
	end
end

class Integer
	def as_filesize
		if self > 2**30
			("%.2f" % (self.to_f / 2**30)) << ' gb'
		elsif self > 2**20
			("%.2f" % (self.to_f / 2**20)) << ' mb'
		elsif self > 2**10
			("%.2f" % (self.to_f / 2**10)) << ' kb'
		else
			(self.to_s) << ' bytes'
		end
	end
end

class File
	def self.contentsize(filename)
		stat = File.stat(filename)
		if(stat.directory?)
			dc = 0
			fc = 0
			begin
				Dir.open(filename).each do |d|
					if(d[0] != '.'[0])
						if File.stat(File.join(filename, d)).directory? 
							dc += 1
						else
							fc += 1
						end
					end
				end
				[ 
					if dc > 0 
						"#{dc} #{if dc > 1 then "directories" else "directory" end}," 
					else 
						"" 
					end,
					"#{fc} #{if fc > 1 then "files" else "file" end}"
				].join(' ')
			rescue
				'?'
			end
		else
			stat.size.as_filesize
		end
	end

	def self.images(filename)
		stat = File.stat(filename)
		LOGGER.debug { "Finding images in #{filename}" }
		images = []
		begin
			Dir.open(filename).each do |d|
				if(d[0] != '.'[0])
					if /.(jpg|jpeg|gif|png|tif|tiff|svg)$/i =~ d
						images << d
					end
				end
			end
		rescue
			LOGGER.error { "Error reading directory #{filename}, #{$!.class}, #{$!.message}" }
			[]
		end
		LOGGER.debug { "Found images #{images.inspect}" }
		images
	end
end

class FCGILet
	attr_accessor :out, :in, :docroot, :systempath, :mode, :url
	def query
		url.query
	end
	def host
		url.host
	end
	def path
		url.path.urldecode
	end
	def initialize(req)
		self.docroot = req.docroot
		self.url = req.selfurl
		self.systempath = req.path_translated
		
		self.out = req.out
		self.in = req.in
		
		self.mode = req.env['REQUEST_METHOD']
	end
end

class Ambindextrous < FCGILet
	attr_accessor :template, :edittemplate, :do_images
	def initialize(req)
		super
		LOGGER.debug("systempath = #{systempath}")
		LOGGER.debug("docroot = #{docroot}")
		if File.directory? systempath
			dir = systempath
		else
			dir = File.dirname(systempath)
		end
		paths = [dir, docroot, File.join(File.dirname(__FILE__), '..')]
		files = ['.ambindextrous.html', 'ambindextrous.html']
		templatefile = paths.map { |e| files.map { |f| File.join(e, f) } }.flatten.select { |e| LOGGER.debug("Seeking #{e}."); t = File.exists? e; if t then LOGGER.debug('found'); end; t }.first

		LOGGER.debug("templatefile = #{templatefile}")
		self.template = ERB.new(File.read(templatefile))
		if File.exists?(File.join(docroot, 'ambindextrous-edit.html'))
			self.edittemplate = ERB.new(File.read(File.join(docroot, 'ambindextrous-edit.html')))
		else
			self.edittemplate = ERB.new(File.read(File.join(File.dirname($0), '..', 'ambindextrous-edit.html')))
		end
		self.do_images = true
	end

	def log_errors
		begin
			yield
		rescue Exception => e
			LOGGER.error { "Error #{e.class}: #{e.message}\n#{e.backtrace.join("\n")}" }
			raise
		end
	end

	def run
		if(mode == 'POST')
			save_feedback
		else
			out << "Content-type: text/html\n\n"
			if(query == 'edit-feedback')
				show_edit
			else
				show_listing
			end
		end
	end

	def show_edit
		text = ''
		out.puts(edittemplate.result(binding))
	end

	def show_listing
		images = []
		entries = []

		feedback = ''
		description = ''
		Dir.open(systempath).each do |e|
			begin 

				next if !File.readable? File.join(systempath, e)
				next if e[0] == ?.
				
				s = File.stat(qp = File.join(systempath, e))
				extension = ''

				if match = /([.][a-z0-9]+)$/i.match(e)
					LOGGER.debug "Chopping extension from #{e}"
					if ['html', 'png', 'jpg', 'jpeg', 'gif', 'swf', 'mp3', 'ogg'].include? match[1].downcase
						extension = match[1]
						e = e[(0..(-extension.length - 1))]
					end
				end

				LOGGER.debug e.inspect

				entry = OpenStruct.new
				entry.pathurl = e.urlencode
				entry.path = e
				entry.extension = extension
				entry.description = ''
				entry.images = (log_errors { make_thumburls(File.images(qp), e) } rescue "")
				entry.type = if s.directory? then '/' else '' end
				entry.time = s.mtime.strftime('%e %b %y')
				entry.size = File.contentsize(qp)
				if /[.](jpg|jpeg|gif|png|svg)/i =~ e
					entry.thumbnail = '/global-site-overlay/ambindextrous/bin/thumbnailer/128x128' + File.join(self.url.path, e.urlencode)
					images << entry
				else
					entries << entry
				end
			rescue Exception => x
				LOGGER.debug x + " " + x.backtrace.join(", ")
			end
		end
		if !do_images 
			entries += images
		end
		images.sort! { |x,y| x.path <=> y.path }
		entries.sort! { |x,y| x.path <=> y.path }
		LOGGER.debug { images.inspect }
		out.puts(template.result(binding))
	end

	def make_thumburls(images, e)
		if images.empty? 
			"" 
		else 
			images.map { |i| 
				#f = File.join(File.basename(filename), i)
				# FIXME: proper URL escaping
				"<a href='#{File.join(e, i)}'><img src='#{File.join('/global-site-overlay/ambindextrous/bin/thumbnailer/32x24', self.url.path, e, i)}' alt='#{i}' title='#{i}' /></a>" 
			}.join(' ')
		end
	end
end

class Thumbnailer < FCGILet
	attr_accessor :size
	def initialize(fcgi, size)
		self.size = size
		super(fcgi)
	end

	def run(image)
		cacher = WebThumbnailer.new(size)
		file = File.join(systempath, image)
		content = cacher.thumbnail(file)
		out << "Content-type: image/jpeg\n"
		out << "Content-Length: #{content.size}\n\n" 
		out << content
	end
end

errorcount = 0
FCGI.each do |fcgi|
	begin
		Ambindextrous.new(fcgi).run
	rescue Exception => e
		begin
			fcgi.out << "Status: 500\n"
			fcgi.out << "Content-type: text/plain\n\n"
			fcgi.out << "#{e} (#{e.class.name}): #{e.backtrace.join("\n")}"
			errorcount += 1
		rescue Exception => e
			fcgi.finish
		end
	ensure
		fcgi.finish
	end
	if errorcount > 5 
		exit
	end
end
	
# vim: syntax=ruby
